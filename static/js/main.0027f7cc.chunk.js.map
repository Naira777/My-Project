{"version":3,"sources":["Photo/earth2.jpg","Photo/earth.jpg","Components/PhotoofDay/DisplayPhoto.module.css","Components/Navbar/Navbar.jsx","Components/Header/Header.jsx","api.js","Redux/nasa-reducer.js","Redux/weather-reducer.js","Redux/redux.js","Redux/selectors-nasa.js","Components/PhotoofDay/DisplayPhoto.jsx","Components/FormsControls/FormsControls.js","Components/PhotoofDay/PhotoDayForm.jsx","Components/PhotoofDay/PhotoContainer.jsx","Redux/selectors-weather.js","Components/Weather/DisplayWeather.jsx","Components/Weather/WeatherForm.jsx","Components/Weather/WeatherContainer.js","App.js","serviceWorker.js","index.js","Components/Navbar/Navbar.module.css","Components/Header/Header.module.css","Components/FormsControls/FormsControls.module.css"],"names":["module","exports","Navbar","className","s","nav","item","to","activeClassName","activeLink","Header","header","src","earth2","foto","instance","axios","baseURL","headers","instanceforweather","nasaAPI","date","get","then","response","data","weatherAPI","cityName","initialState","photo","url","title","explanation","setData","type","nasaReducer","state","action","country","temp","description","humidity","windspeed","icon","setDataWeather","weatherReducer","location","name","current","temp_c","wind_kph","condition","text","reducers","combineReducers","form","formReducer","nasaPage","weatherPage","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","getNasaPhoto","getExplanation","getTitleOfNasaPhoto","DisplayPhoto","Photo","useSelector","TitleOfPhoto","Explanation","all","textcolor","class","FormControl","input","meta","props","child","hasError","touched","error","styles","formControl","children","Input","restProps","PhotoDayReduxForm","reduxForm","onSubmit","handleSubmit","Field","component","placeholder","aria-label","PhotoContainer","React","memo","useState","editMode","setEditeMode","Day","setDay","Error","setError","dispatch","useDispatch","useEffect","a","formData","Day1","searchedDay","Date","data-dismiss","getTemp","getcityName","getCountry","getWindspeed","getDescription","getHumidity","getIcon","DisplayWeather","WeatherReduxForm","WeatherContainer","City","setCity","City1","searchedCity","App","path","render","earth","Component","SamuraiJSApp","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0027f7cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/earth2.cb68c6dc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/earth.efc38578.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"DisplayPhoto_title__1YveL\",\"textcolor\":\"DisplayPhoto_textcolor__1I0zN\",\"all\":\"DisplayPhoto_all__3ZVMR\"};","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst Navbar = () => {\r\n\r\n   return  <nav className={s.nav}>\r\n   <div className={s.item}> \r\n  <NavLink to=\"/astronomypictureoftheday\" activeClassName={s.activeLink}> Astronomy picture  </NavLink>\r\n   </div >\r\n   <div className={s.item}> \r\n  <NavLink to=\"/weatherofCity\" activeClassName={s.activeLink}> Weather by City </ NavLink>\r\n   </div>\r\n                 \r\n\r\n\r\n\r\n\r\n</nav>\r\n}\r\n\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport earth2 from '../../Photo/earth2.jpg';\r\n\r\nconst Header = () => {\r\n   \r\n \r\n   return <header className={s.header}>\r\n      \r\n       <img src={earth2} className={s.foto} />               \r\n\r\n\r\n   \r\n    </header>  \r\n\r\n\r\n    \r\n}\r\n\r\n\r\n\r\n\r\nexport default Header;\r\n","\r\nimport * as axios from 'axios';\r\n\r\n\r\n\r\n\r\nconst instance = axios.create ({ \r\n\r\n\r\n    \r\n    baseURL: 'https://api.nasa.gov/planetary/apod',\r\n    headers: {\r\n\r\n       \"API-KEY\": \"WpLoa1jcg8MdhMrIfup0CYk45GsdhRQLlbcjVa3r\"\r\n    }\r\n\r\n\r\n});\r\n\r\n\r\nconst instanceforweather = axios.create ({ \r\n\r\n    baseURL: 'http://api.weatherapi.com/v1',\r\n    headers: {\r\n\r\n       \"API-KEY\": \"5e702696db01489eaa2124026202008\"\r\n    }\r\n\r\n\r\n});\r\n\r\nexport const nasaAPI = { \r\n\r\n\r\n    getPhotoOfTheDay (date)  {\r\n    \r\n    \r\n        return instance.get(`?date=${date}&api_key=WpLoa1jcg8MdhMrIfup0CYk45GsdhRQLlbcjVa3r`)\r\n    \r\n       .then(response =>\r\n\r\n         {\r\n             return response.data;\r\n    \r\n          });  \r\n\r\n}\r\n}\r\nexport const weatherAPI = { \r\n\r\n\r\n    getWeather (cityName)  {\r\n    \r\n    \r\n        return instanceforweather.get(`/current.json?key=5e702696db01489eaa2124026202008&q=${cityName}`)\r\n    \r\n       .then(response =>\r\n\r\n         {\r\n            return response.data;\r\n    \r\n       });  \r\n\r\n}\r\n}","import { nasaAPI } from \"../api\";\r\n\r\nconst SAVE_DATA_SUCCESS = \"SAVE_DATA_SUCCESS\";\r\n\r\nconst initialState = {\r\n \r\n  photo: {\r\n\r\n url: \"\",\r\n title: \"\",\r\n explanation: \"\"\r\n\r\n  }\r\n \r\n};\r\n\r\nconst nasaReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    \r\n\r\n     case SAVE_DATA_SUCCESS: {\r\n      return { ...state,\r\n          photo: { ...state.photo, url: action.data.url, title: action.data.title, explanation: action.data.explanation} };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport const setData = (data) => {\r\n  return { type: SAVE_DATA_SUCCESS, data };\r\n};\r\n\r\nexport const getPhotoFromNasa = (date) => async (dispatch) => {\r\n  const data = await nasaAPI.getPhotoOfTheDay(date);\r\n   dispatch(setData(data));\r\n\r\n   \r\n};\r\nexport default nasaReducer;","import { weatherAPI } from \"../api\";\r\n\r\nconst SAVE_CITY_WEATHER= \"SAVE_CITY_WEATHER\";\r\n\r\nconst initialState = {\r\n \r\n  cityName: \"\",\r\n  country: \"\",\r\n  temp: 0,\r\n  description: \"\",\r\n  humidity: 0,\r\n  windspeed: 0,\r\n icon: \"\"\r\n};\r\n\r\nconst weatherReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    \r\n\r\n     case SAVE_CITY_WEATHER: {\r\n      return { ...state,\r\n         cityName: action.data.location.name,\r\n         country: action.data.location.country,\r\n         temp: action.data.current.temp_c,\r\n\r\n          humidity: action.data.current.humidity,\r\n          windspeed: action.data.current.wind_kph,       \r\n         description: action.data.current.condition.text,\r\n                icon: action.data.current.condition.icon\r\n        }\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport const setDataWeather= (data) => {\r\n  return { type: SAVE_CITY_WEATHER, data};\r\n};\r\n\r\n\r\n\r\nexport const getWeatherForCity = (name) => async (dispatch) => {\r\n  const data = await weatherAPI.getWeather(name);\r\n  dispatch(setDataWeather(data));\r\n\r\n\r\n   \r\n};\r\n\r\nexport default weatherReducer;","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\n\r\nimport thunkMiddleware  from 'redux-thunk';\r\nimport nasaReducer from './nasa-reducer';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport weatherReducer from \"./weather-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n\r\nform: formReducer,\r\nnasaPage: nasaReducer,\r\nweatherPage: weatherReducer\r\n\r\n});\r\n\r\n\r\n const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n const store = createStore(reducers,  composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n//let store = createStore (reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","\r\n\r\nexport const getNasaPhoto = (state) => {\r\n    return state.nasaPage.photo.url;\r\n}\r\n\r\nexport const getExplanation = (state) => {\r\n    return state.nasaPage.photo.explanation;\r\n}\r\nexport const getTitleOfNasaPhoto = (state) => {\r\n\r\nreturn state.nasaPage.photo.title;\r\n\r\n\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getNasaPhoto, getTitleOfNasaPhoto, getExplanation } from '../../Redux/selectors-nasa';\r\n\r\nimport ReactPlayer from \"react-player\";\r\nimport s from \"./DisplayPhoto.module.css\";\r\n\r\n\r\nconst DisplayPhoto = () => {\r\n  const Photo = useSelector(getNasaPhoto);\r\n  const TitleOfPhoto = useSelector(getTitleOfNasaPhoto);\r\n  const Explanation= useSelector(getExplanation);\r\n\r\n\r\n  return (\r\n    <div className={s.all}>\r\n      <div className={s.title}>\r\n      <h4 > This is the Astronomy Picture of the Day </h4>\r\n      <h3>  {TitleOfPhoto}</h3>\r\n      </div>\r\n  <div className={s.textcolor}>{Explanation}</div>\r\n     \r\n\r\n           <img src={Photo} class=\"mx-auto d-block\" />\r\n\r\n          \r\n\r\n      <ReactPlayer\r\n        url={Photo}\r\n      />\r\n\r\n       \r\n      </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default DisplayPhoto;\r\n","import React from \"react\";\r\nimport styles from \"../FormsControls/FormsControls.module.css\";\r\nimport { Field } from \"redux-form\";\r\n\r\nexport const FormControl = ({ input, meta, child, ...props }) => {\r\n\r\n  const hasError = meta.touched && meta.error;\r\n  return (\r\n    <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n      <div>{props.children}</div>\r\n\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea = (props) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      {\" \"}\r\n      <textarea {...input} {...restProps} />{\" \"}\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const Input = (props) => {\r\n  const { input, meta, child, ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      {\" \"}\r\n      <input {...input} {...restProps} />{\" \"}\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport const createField = (\r\n  placeholder,\r\n  name,\r\n  validators,\r\n  component,\r\n  props = {},\r\n  text = \"\"\r\n) => {\r\n  return (\r\n    <div>\r\n      <Field\r\n        placeholder={placeholder}\r\n        name={name}\r\n        validate={validators}\r\n        component={component}\r\n        {...props}\r\n      />{\" \"}\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Input } from \"../FormsControls/FormsControls\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\nimport s from './DisplayPhoto.module.css'\r\n\r\nconst PhotoDayForm = (props) => {\r\n  return (\r\n    <div>\r\n      <label className={s.textcolor}>\r\n        <h3> Get astronomy photo of the day </h3>\r\n      </label>\r\n   \r\n      <form class=\"form-inline\" onSubmit={props.handleSubmit}>\r\n        <Field\r\n          component={Input}\r\n          name={\"searchedDay\"}\r\n          type={\"search\"}\r\n          placeholder={\"YYYY-MM-DD\"}\r\n          aria-label=\"Search\"\r\n          class=\"form-control mr-ms-2\"\r\n        />\r\n\r\n        <button class=\"btn btn-outline-success\" type=\"submit\">\r\n          Get Astronomy Picture\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nconst PhotoDayReduxForm = reduxForm({ form: \"getpicture\" })(PhotoDayForm);\r\n\r\nexport default PhotoDayReduxForm;","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport DisplayPhoto from \"./DisplayPhoto\";\r\nimport { getPhotoFromNasa } from '../../Redux/nasa-reducer';\r\nimport PhotoDayReduxForm from \"./PhotoDayForm\";\r\n\r\n\r\nconst PhotoContainer = React.memo((props) => {\r\nconst [editMode, setEditeMode] = useState(true);\r\nconst [Day, setDay] = useState();\r\nconst [Error,setError]= useState();\r\n\r\n\r\n    const onSubmit = (formData) => {\r\n    const Day1= formData.searchedDay;\r\n    if ( typeof Day1 == typeof Date() ){\r\n      setDay(Day1);\r\n\r\n    }else if(typeof Day1 != typeof Date())\r\n    {setError(true)\r\n        \r\n    }\r\n\r\n    }\r\n\r\n    const dispatch= useDispatch();\r\n\r\n    useEffect(() => {\r\n    \r\n    dispatch(getPhotoFromNasa(Day))\r\n    .then(() => {\r\n      setEditeMode(false)}\r\n    ); \r\n    \r\n      }, [Day]);\r\n   \r\n    \r\n\r\n\r\n  return (\r\n    <>\r\n      <div>{editMode &&  <PhotoDayReduxForm onSubmit={onSubmit} />}</div>\r\n\r\n\r\n{Error && editMode && <div class=\"alert alert-success alert-dismissible\">\r\n  <button type=\"button\"  class=\"close\" data-dismiss=\"alert\">&times;</button>\r\n  <strong>Attention!</strong> Please Enter Date!!!\r\n</div> }\r\n \r\n\r\n\r\n      <div>\r\n        {!editMode  && (\r\n          <DisplayPhoto />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default PhotoContainer;\r\n","\r\nexport const getTemp = (state) => {\r\n    return state.weatherPage.temp;\r\n}\r\n\r\nexport const getcityName= (state) => {\r\n    return state.weatherPage.cityName;\r\n}\r\nexport const getCountry = (state) => {\r\n\r\nreturn state.weatherPage.country;\r\n\r\n\r\n}\r\nexport const getWindspeed = (state) => {\r\n    return state.weatherPage.windspeed;\r\n}\r\n\r\nexport const getSunRise= (state) => {\r\n    return state.weatherPage.sun.sunrise;\r\n}\r\nexport const getSunSet= (state) => {\r\n    return state.weatherPage.sun.sunset;\r\n}\r\nexport const getDescription = (state) => {\r\n\r\nreturn state.weatherPage.description;\r\n\r\n}\r\n\r\nexport const getHumidity = (state) => {\r\n\r\nreturn state.weatherPage.humidity;\r\n\r\n}\r\nexport const getIcon = (state) => {\r\n\r\nreturn state.weatherPage.icon;\r\n\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getcityName, getCountry, getTemp, getDescription, getWindspeed, getSunRise, getSunSet, getHumidity, getIcon } from '../../Redux/selectors-weather';\r\n\r\n\r\nconst DisplayWeather = () => {\r\n\r\nconst cityName= useSelector(getcityName);\r\nconst country= useSelector(getCountry);\r\nconst temp= useSelector(getTemp);\r\nconst description= useSelector(getDescription);\r\nconst windspeed= useSelector(getWindspeed);\r\nconst humidity= useSelector(getHumidity);\r\nconst icon=useSelector(getIcon);\r\n\r\nreturn (<div>\r\n\r\n\r\n<table class=\"table table-dark\">\r\n    <thead>\r\n      <tr>\r\n          <th>Country</th>\r\n          <th>{country}</th>\r\n              </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr>\r\n        <td>City</td>\r\n   <td>{cityName}</td>\r\n       </tr>\r\n     <tr>\r\n        <td>Temperature</td>\r\n         <td>{temp}°C</td>\r\n       </tr>\r\n      <tr>\r\n        <td>Description</td>\r\n<td>{description} <img src={icon} /> </td>\r\n       </tr>\r\n\r\n       <tr>\r\n        <td>Humidity</td>\r\n   <td>{humidity}%</td>\r\n       </tr>\r\n\r\n        <tr>\r\n        <td>Wind speed</td>\r\n      <td>{windspeed} kph</td>\r\n       </tr>\r\n   \r\n\r\n       \r\n    </tbody>\r\n  </table>\r\n\r\n\r\n\r\n\r\n    </div>)\r\n}\r\n\r\n\r\nexport default DisplayWeather;","import React from \"react\";\r\nimport { Input } from \"././../FormsControls/FormsControls\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\nimport s from '../PhotoofDay/DisplayPhoto.module.css';\r\n\r\nconst WeatherForm = (props) => {\r\n  return (\r\n    <div>\r\n      <label>\r\n        <h3 className= {s.textcolor}> Enter City Name </h3>\r\n      </label>\r\n   \r\n      <form class=\"form-inline\" onSubmit={props.handleSubmit}>\r\n        <Field\r\n          component={Input}\r\n          name={\"searchedCity\"}\r\n          type={\"search\"}\r\n          placeholder={\"Enter City Name\"}\r\n          aria-label=\"Search\"\r\n          class=\"form-control mr-sm-2\"\r\n        />\r\n\r\n        <button class=\"btn btn-outline-success\" type=\"submit\">\r\n          Get Weather\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nconst WeatherReduxForm = reduxForm({ form: \"getweather\" })(WeatherForm);\r\n\r\nexport default WeatherReduxForm;","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport DisplayWeather from \"./DisplayWeather\";\r\nimport WeatherReduxForm from \"./WeatherForm\";\r\nimport { getWeatherForCity } from \"../../Redux/weather-reducer\";\r\n\r\nconst WeatherContainer = React.memo((props) => {\r\nconst [editMode, setEditeMode] = useState(true);\r\nconst [City, setCity] = useState();\r\n\r\n\r\n\r\n   const onSubmit = (formData) => {\r\n   const City1= formData.searchedCity;\r\n    setCity(City1);\r\n    }\r\n    \r\n\r\n\r\n    const dispatch= useDispatch();\r\n\r\n    useEffect(() => {\r\n    \r\n    dispatch(getWeatherForCity(City))\r\n    .then(() => {\r\n      setEditeMode(false)}\r\n    ); \r\n    \r\n      }, [City]);\r\n   \r\n    \r\n\r\n\r\n  return (\r\n    <>\r\n      <div>{editMode &&  <WeatherReduxForm onSubmit={onSubmit} />}</div>\r\n\r\n\r\n     <div>\r\n        {!editMode  && (\r\n          <DisplayWeather />\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n});\r\n\r\nexport default WeatherContainer;\r\n","import React from 'react';\n\nimport './App.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Navbar from './Components/Navbar/Navbar';\nimport Header from './Components/Header/Header';\nimport store from './Redux/redux';\nimport { Provider } from 'react-redux';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport PhotoContainer from '../src/Components/PhotoofDay/PhotoContainer';\n\nimport WeatherContainer from './Components/Weather/WeatherContainer';\nimport earth from '../src/Photo/earth.jpg';\n\nclass App extends React.Component {\n \n    \n\n  render() {\n\n    return (    \n      <div className=\"app-wrapper\">\n       \n      <Header />\n        <Navbar />\n        \n        <div class=\"app-wrapper-content\">\n\n       <div className=\"asfoto\">\n         <Route path=\"/astronomypictureoftheday\" render={() => <PhotoContainer />} />\n  <Route path=\"/weatherofCity\" render={() => <WeatherContainer />} />\n</div>\n\n          \n  \n          <div > \n         <img src={earth} className=\"foto\" />\n         </div>\n\n            \n        </div>\n      </div>\n      \n    );\n  }\n}\n\n\n\n\n\nconst SamuraiJSApp = (props) => {\n\n\n  return (\n    <BrowserRouter >\n     <Provider store={store}>\n        <App />\n     </Provider>\n    </BrowserRouter>\n  );\n};\nexport default SamuraiJSApp;\n\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport SamuraiJSApp from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SamuraiJSApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2OUtl\",\"item\":\"Navbar_item__2VTmv\",\"activeLink\":\"Navbar_activeLink__2vwVg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__qOx37\",\"foto\":\"Header_foto__tJa9w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3LMp-\",\"error\":\"FormsControls_error__2UFDB\",\"formSummaryError\":\"FormsControls_formSummaryError__1MPc0\"};"],"sourceRoot":""}